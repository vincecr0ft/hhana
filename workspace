#!/usr/bin/env python

import sys
from mva import cmd, MMC_MASS
from mva.samples import Higgs
from mva.workspace import (
    write_workspaces, cuts_workspace, mva_workspace,
    feature_workspace, weighted_mass_workspace, weighted_mixing_workspace, mixing_workspace, weighted_mass_cba_workspace)
from mva.analysis import get_analysis
from mva.massregions import MassRegions
from mva import log; log = log[__name__]

parser = cmd.analysis_parser(cmd.general_parser(
    multi_years=True, multi_categories=True))
parser.add_argument('type', choices=('mva', 'cuts', 'var', 'weighted-mass', 'weighted-mixing', 'mixing', 'weighted-mass-cba'), default='mva')
parser.add_argument('--clf-mass', type=int, default=None)
parser.add_argument('--clf-bins', default='optimal')
parser.add_argument('--clf-swap', default=False, action='store_true')
parser.add_argument('--sideband', default=False, action='store_true')
parser.add_argument('--field', default=MMC_MASS)
parser.add_argument('--binning', default='15,50,200')
args = parser.parse_args()

if args.masses == 'all':
    args.masses = Higgs.MASSES
else:
    args.masses = map(int, args.masses.split(','))

if args.type == 'weighted-mixing' or 'mixing':
    if args.mixings is None or args.mixings == [0.0]:
        args.mixings = Higgs.MIXINGS
#    args.mixings = [-0.6]
d_tilde=args.mixings
log.info("args.mixings are {0}".format(args.mixings))
cuts = None
if args.sideband:
    massregions = MassRegions()
    cuts = massregions.control_region
    # always unblind in the mass sideband
    args.unblind = True

params = {}
if args.type == 'mva':
    workspace_func = mva_workspace
    params['clf_mass'] = args.clf_mass
    params['clf_bins'] = args.clf_bins
    params['clf_swap'] = args.clf_swap
    params['unblind'] = args.unblind
elif args.type == 'cuts':
    workspace_func = cuts_workspace
    params['sideband'] = args.sideband
    params['unblind'] = args.unblind
elif args.type == 'weighted-mass':
    workspace_func = weighted_mass_workspace
elif args.type == 'weighted-mixing':
    workspace_func = weighted_mixing_workspace
elif args.type == 'mixing':
    workspace_func = mixing_workspace
elif args.type == 'weighted-mass-cba':
    workspace_func = weighted_mass_cba_workspace
else:
    params['field'] = args.field
    bins, low, high = map(float, args.binning.split(','))
    params['template'] = Hist(int(bins), low, high, type='D')
    workspace_func = feature_workspace

years = args.years
categories = args.categories
if len(categories) == 1 and len(years) > 1:
    categories = categories * len(years)
elif len(categories) != len(years):
    sys.exit("specify the same number of category definitions as years")

signal_regions = {}
control_regions = {}
shape_control = {}
log.info("about to enter main loop")
for year, year_categories in zip(years, categories):
    log.info("for year {0} and category {1}".format(str(year),year_categories))
    analysis = get_analysis(args, year=year)
    sr = workspace_func(analysis=analysis,
                            categories=year_categories,
                            masses=args.masses,
                            mixings=d_tilde,
                            systematics=args.systematics,
                            cuts=cuts,
                            **params)
    log.info("got signal regions {0}".format(str(sr)))
    signal_regions[year] = sr
#    control_regions[year] = cr
#    shape_control[year] = scr

suffix = analysis.get_suffix(year=False)
if args.type == 'var':
    suffix += '_' + args.field
else:
    suffix += '_' + args.type
if args.sideband:
    suffix += '_sideband'
if args.output_suffix:
    suffix += '_' + args.output_suffix
path = 'workspaces/hh{0}'.format(suffix.lower())
log.info("about to write workspaces")
#write_workspaces(path, 'hh', signal_regions, controls=control_regions, shapeControls=shape_control)
write_workspaces(path, 'hh', signal_regions)

