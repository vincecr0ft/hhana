#!/usr/bin/env python
"""
Create variable plots
"""
from mva.cmd import get_parser

args = get_parser(actions=False).parse_args()
year = args.year

# rootpy imports
from rootpy.io import root_open
from rootpy.tree import Cut
from rootpy.plotting import Hist, Canvas, Legend, Graph
import rootpy.plotting.utils as rootpy_utils
from rootpy.plotting.style.atlas import ATLAS_label


# local imports
from mva.plotting import draw_channel, draw_channel_array, uncertainty_band, hist_scores, draw_ratio
from mva.systematics import get_systematics, parse_systematics
from mva.categories import CATEGORIES
from mva.massregions import MassRegions
from mva.variables import OBSERVABLES, VARIABLES, YEAR_VARIABLES, get_label
from mva.defaults import TARGET_REGION
from mva.analysis import get_analysis
from mva import log, plot_dir

import ROOT

def plot_bin(vbf, ggf, ztt, binNr, category):
    _, _, _, ymax = rootpy_utils.get_limits([ztt, vbf, ggf], ypadding=(0.3, 0)) 
    plot = Canvas()
    vbfE = vbf.Clone(fillcolor=vbf.GetLineColor(),fillstyle='/')
    zttE = ztt.Clone(fillcolor=ztt.GetLineColor(),fillstyle='/')
    ggfE = ggf.Clone(fillcolor=ggf.GetLineColor(),fillstyle='/')
    vbfE.drawstyle = 'e2'
    ggfE.drawstyle = 'e2'
    zttE.drawstyle = 'e2'
    zttE.Draw()
    zttE.yaxis.title = 'Fraction of Events / 5 GeV'
    zttE.xaxis.title = 'Obtimal Observable 1 (O1) in bin '+str(binNr) 
    zttE.yaxis.SetLimits(0, ymax)
    zttE.yaxis.SetRangeUser(0, ymax)
    zttE.xaxis.SetNdivisions(507, True)
    vbfE.Draw("same")
    ggfE.Draw("same")
    ztt.Draw("same")
    vbf.Draw('same')
    ggf.Draw('same')
    leg_o1 = Legend(2, pad=plot,
                     entryheight=0.08,
                     margin=0.2,
                     textsize=22,
                     entrysep=0.01)
    leg_o1.AddEntry(ztt, style='L')
    leg_o1.AddEntry(ggf, style='L')
    leg_o1.AddEntry(vbf, style='L')
    leg_o1.SetHeader('ObtObs')
    leg_o1.Draw()
    if args.year == 2011:
        sqrts = 7
    elif args.year == 2012:
        sqrts = 8
    else:
        sqrts= None

    ATLAS_label(plot.GetLeftMargin()+0.03, 0.89,
                sep=0.14, pad=plot, sqrts=sqrts,
                text="Internal", textsize=22)
    label = ROOT.TLatex( plot.GetLeftMargin() + 0.03, 0.83,
                         category.label )
    label.SetNDC()
    label.SetTextFont(43)
    label.SetTextSize(22)
    label.Draw()
    for fmt in args.output_formats:
        plot.SaveAs('plots/bin_%s_O1_%s%s.%s' % (binNr, category.name, output_suffix, fmt))

def plot_sample(bin1, bin2, bin3, bin4, bin5, sample, category):
    _, _, _, ymax = rootpy_utils.get_limits([ztt, vbf, ggf], ypadding=(0.3, 0)) 
    plot = Canvas()
    bin1.SetLineColor('blue')
    bin2.SetLineColor('purple')
    bin3.SetLineColor('black')
    bin4.SetLineColor('pink')
    bin5.SetLineColor('red')
    bin1.drawstyle = 'e2'
    bin2.drawstyle = 'e2'
    bin3.drawstyle = 'e2'
    bin4.drawstyle = 'e2'
    bin5.drawstyle = 'e2'
    bin1.Draw()
    bin1.yaxis.title = 'Fraction of Events / 5 GeV'
    bin1.xaxis.title = 'Obtimal Observable 1 (O1) '+str(sample) 
    bin1.yaxis.SetLimits(0, ymax)
    bin1.yaxis.SetRangeUser(0, ymax)
    bin1.xaxis.SetNdivisions(507, True)
    bin2.Draw("same")
    bin3.Draw("same")
    bin4.Draw("same")
    bin5.Draw('same')
    leg_o1 = Legend(2, pad=plot,
                     entryheight=0.08,
                     margin=0.2,
                     textsize=22,
                     entrysep=0.01)
    leg_o1.AddEntry(bin1, style='L')
    leg_o1.AddEntry(bin2, style='L')
    leg_o1.AddEntry(bin3, style='L')
    leg_o1.AddEntry(bin4, style='L')
    leg_o1.AddEntry(bin5, style='L')
    leg_o1.SetHeader(str(sample)+' ObtObs')
    leg_o1.Draw()
    if args.year == 2011:
        sqrts = 7
    elif args.year == 2012:
        sqrts = 8
    else:
        sqrts= None

    ATLAS_label(plot.GetLeftMargin()+0.03, 0.89,
                sep=0.14, pad=plot, sqrts=sqrts,
                text="Internal", textsize=22)
    label = ROOT.TLatex( plot.GetLeftMargin() + 0.03, 0.83,
                         category.label )
    label.SetNDC()
    label.SetTextFont(43)
    label.SetTextSize(22)
    label.Draw()
    for fmt in args.output_formats:
        plot.SaveAs('plots/%s_O1_%s%s.%s' % (sample, category.name, output_suffix, fmt))


def plot_o1(vbf, vbf52, vbf06, ggf, ztt, category):
    _, _, _, ymax = rootpy_utils.get_limits([ztt, vbf, vbf52, vbf06, ggf], ypadding=(0.3, 0)) 
    plot = Canvas()
    ztt.Draw()
    ztt.yaxis.title = 'Fraction of Events / 5 GeV'
    ztt.xaxis.title = 'Obtimal Observable 1 (O1)' 
    ztt.yaxis.SetLimits(0, ymax)
    ztt.yaxis.SetRangeUser(0, ymax)
    ztt.xaxis.SetNdivisions(507, True)
    vbf.Draw('same')
    vbf52.Draw('same')
    vbf06.Draw('same')
    ggf.Draw('same')
    leg_o1 = Legend(2, pad=plot,
                     entryheight=0.08,
                     margin=0.2,
                     textsize=22,
                     entrysep=0.01)
    leg_o1.AddEntry(ztt, style='L')
    leg_o1.AddEntry(ggf, style='L')
    leg_o1.AddEntry(vbf, style='L')
    leg_o1.AddEntry(vbf52, style='L')
    leg_o1.AddEntry(vbf06, style='L')
    leg_o1.SetHeader('ObtObs')
    leg_o1.Draw()
    if args.year == 2011:
        sqrts = 7
    elif args.year == 2012:
        sqrts = 8
    else:
        sqrts= None

    ATLAS_label(plot.GetLeftMargin()+0.03, 0.89,
                sep=0.14, pad=plot, sqrts=sqrts,
                text="Internal", textsize=22)
    label = ROOT.TLatex( plot.GetLeftMargin() + 0.03, 0.83,
                         category.label )
    label.SetNDC()
    label.SetTextFont(43)
    label.SetTextSize(22)
    label.Draw()
    for fmt in args.output_formats:
        plot.SaveAs('plots/lowBDTO1_%s%s.%s' % (category.name, output_suffix, fmt))

SYSTEMATICS = get_systematics(year)
args.systematics_components = parse_systematics(args.systematics_components)

mass_regions = MassRegions(
    low=args.low_mass_cut,
    high=args.high_mass_cut,
    high_sideband_in_control=args.high_sideband_in_control,
    mass_window_signal_region=False,
    #args.no_mmc,
    # not enough events to only train in signal region
    train_signal_region=False)

control_region = mass_regions.control_region
signal_region = mass_regions.signal_region
#signal_region = control_region # for creating control workspaces
train_region = mass_regions.train_region

categories = CATEGORIES[args.categories]
category_names = args.category_names
target_region = args.target_region

analysis = get_analysis(args , systematics = False)

output_suffix = analysis.get_suffix()

cat_defs = [args.categories]
if args.categories != 'presel':
    cat_defs.append(args.controls)

for category in analysis.iter_categories(*cat_defs, names=args.category_names):
    if not category.name == 'vbf':
        continue
    else: print 'category is vbf'

    is_control = category.analysis_control

    cuts = Cut(args.plot_cut)

    if args.plot_expr is not None:
        VARS = {
            tuple(args.plot_expr.split(',')): {
                'title': args.plot_name,
                'range': (args.plot_min, args.plot_max),
                'bins': args.plot_bins,
                'filename': 'expr_' + args.plot_name.replace(' ', '_')}}
    else:
        VARS = OBSERVABLES # formerly VARIABLES
        VARS.update(YEAR_VARIABLES[args.year])

    clf = None
    if not is_control:
        clf = analysis.get_clf(category, load=True, mass=125, transform=True)
    binning=clf.binning(analysis.year, overflow=1E5)
    for bin in binning: print bin

    if is_control:
        continue


    bins_hist = Hist(binning)
    bins_edges = list(zip(bins_hist.xedgesl(), bins_hist.xedgesh()))

    vbf_00 = analysis.vbf_00
    ggf_00 = analysis.ggf_00
    ztt_00 = analysis.ztautau
#    h125 = analysis.higgs_125
    scores = vbf_00.scores(clf, category, 'OS_ISOL')
    thisBin=0
    for edges in bins_edges:
        thisBin+=1
        print 'this bin number is',thisBin
        print edges[0],' to ',edges[1]

    ### draw shapes in each BDT region 
    thisBin=0
    zttshape=[]
    for edges in bins_edges:
        thisBin+=1
        vbf_field_hist, vbf_field_scale = vbf_00.get_field_hist(VARS, category)
        ggf_field_hist, ggf_field_scale = ggf_00.get_field_hist(VARS, category)
        ztt_field_hist, ztt_field_scale = ztt_00.get_field_hist(VARS, category)
        vbf_00.draw_array(
            vbf_field_hist, category, 'OS_ISOL',
            field_scale=vbf_field_scale,
            clf=clf,
            scores=scores,
            min_score=edges[0],
            max_score=edges[1])
        ggf_00.draw_array(
            ggf_field_hist, category, 'OS_ISOL',
            field_scale=ggf_field_scale,
            clf=clf,
            scores=scores,
            min_score=edges[0],
            max_score=edges[1])
        ztt_00.draw_array(
            ztt_field_hist, category, 'OS_ISOL',
            field_scale=ztt_field_scale,
            clf=clf,
            scores=scores,
            min_score=edges[0],
            max_score=edges[1])
        vbf = Hist(40, -30, 30, linewidth=3, linestyle='dashed', linecolor='blue')
        ggf = Hist(40, -30, 30, linewidth=3, linestyle='solid', linecolor='red')
        ztt = Hist(40, -30, 30, linewidth=3, linestyle='solid')

        for k , h in vbf_field_hist.items():
            log.info('{0:1.2f} < score < {1:1.2f}: for vbf {2} = {3}'.format(
                    edges[0], edges[1], k, h.GetMean()))
            if k=='o1':
                vbf=h
                vbf /= vbf.integral()
        for k , h in ggf_field_hist.items():
            log.info('{0:1.2f} < score < {1:1.2f}: for ggf {2} = {3}'.format(
                    edges[0], edges[1], k, h.GetMean()))
            if k=='o1':
                ggf=h
                ggf.SetLineColor('black')
                ggf /= ggf.integral()
        for k , h in ztt_field_hist.items():
            log.info('{0:1.2f} < score < {1:1.2f}: for ztt {2} = {3}'.format(
                    edges[0], edges[1], k, h.GetMean()))
            if k=='o1':
                ztt=h
                ztt /= ztt.integral()            
                zttshape.append(ztt)
        plot_bin(vbf,ggf,ztt,thisBin,category)
        print 'zttshape', zttshape
        plot_sample(zttshape[0],zttshape[1],zttshape[2],zttshape[3],zttshape[4],'ztautau',category)

### draw whole optobs comparison 
with root_open('o1_hadhad_histos.root', 'recreate') as out:
    template = Hist(40, -30, 30, linewidth=3, drawstyle='hist')
    for category in categories:
        vbf = template.Clone(name="truevbf_%s" % category.name, title=analysis.vbf_00.label, linecolor='black',linestyle='dashed')
        vbf52 = template.Clone(name="vbf52_%s" % category.name, title=analysis.vbf_52.label, linecolor='pink',linestyle='dashed')
        vbf06 = template.Clone(name="vbf06_%s" % category.name, title=analysis.vbf_06.label, linecolor='blue',linestyle='dashed')
        ggf = template.Clone(name="trueggf_%s" % category.name, title=analysis.ggf_00.label, linecolor='red')
        ztt = template.Clone(name="ztt_%s" % category.name, title=analysis.ztautau.label)

        analysis.ztautau.draw('o1', ztt, category, TARGET_REGION)
        analysis.vbf_00.draw('o1', vbf, category, TARGET_REGION)
        analysis.vbf_52.draw('o1', vbf52, category, TARGET_REGION)
        analysis.vbf_06.draw('o1', vbf06, category, TARGET_REGION)
        analysis.ggf_00.draw('o1', ggf, category, TARGET_REGION)

        # normalize                                                                                      
        vbf /= vbf.integral()
        vbf52 /= vbf52.integral()
        vbf06 /= vbf06.integral()
        ggf /= ggf.integral()
        ztt /= ztt.integral()


        # plot the mass distributions                                                                    
        plot_o1(vbf, vbf52, vbf06, ggf, ztt, category)

        vbf.Write()
        vbf52.Write()
        vbf06.Write()
        ggf.Write()
        ztt.Write()


"""

    #Draw BDT
    scores, channel = analysis.clf_channels(clf,
        category, TARGET_REGION, cuts=signal_region,
        mass=125,
        mode='CP',
        bins=10,
        systematics=False,
        unblind=True,
        no_signal_fixes=True)

    draw_channel(channel,
        category=category,
        plot_label='BDT score',
        data_info=str(analysis.data.info),
        output_name='event_bdt_score_control',
        name='BDT score',
        systematics=False,
        output_formats=args.output_formats,
        ypadding=(0.4, 0.),
        log_ypadding=(0.5, 0.1),
        signal_scale=1,
        signal_on_top=True,
        show_ratio=True)

"""
